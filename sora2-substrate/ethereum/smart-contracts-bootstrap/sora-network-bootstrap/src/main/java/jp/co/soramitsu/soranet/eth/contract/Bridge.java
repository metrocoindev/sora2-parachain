package jp.co.soramitsu.soranet.eth.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Bridge extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620043c9380380620043c9833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b50505050919091016040908152602083015190830151606090930151909450919250600090505b84518160ff161015620001215762000117858260ff16815181106200010357fe5b6020026020010151620001a160201b60201c565b50600101620000e2565b50600a80546001600160a01b03199081166001600160a01b03948516179182905560098054909116948416949094178455600b919091556000805460ff19908116600190811761ff0019168355928416825260056020526040808320805483168517905594549093168152929092208054909116909117905550620001fb565b6001600160a01b03811660009081526001602052604081205460ff1615620001c857600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b6141be806200020b6000396000f3fe6080604052600436106200014b5760003560e01c806375273ece11620000bb578063b07c411f1162000079578063b07c411f1462000fce578063c29bb3321462000ffc578063ca70cf6e1462001014578063cd55094714620011e8578063dfd9db89146200121f578063fdfba25d146200150e5762000156565b806375273ece14620009f45780638505e8681462000be057806389c39baf1462000c0e5780639ee3fae51462000de2578063ae6664e01462000fb65762000156565b806323ad7de2116200010957806323ad7de2146200065f5780633b69828814620009445780633e44cf78146200095c5780635fde87c51462000993578063687a82db14620009bd5762000156565b806303ef9d1f146200016957806312c6fa1b14620001ae5780631340641314620001f9578063135f14e2146200042a5780631628313414620006155762000156565b366200015657600080fd5b3480156200016357600080fd5b50600080fd5b3480156200017657600080fd5b50620001ac600480360360608110156200018f57600080fd5b50803590602081013590604001356001600160a01b03166200152e565b005b348015620001bb57600080fd5b50620001e560048036036020811015620001d457600080fd5b50356001600160a01b031662001877565b604080519115158252519081900360200190f35b3480156200020657600080fd5b50620001ac600480360360e08110156200021f57600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135600160201b8111156200025957600080fd5b8201836020820111156200026c57600080fd5b803590602001918460208302840111600160201b831117156200028e57600080fd5b919390929091602081019035600160201b811115620002ac57600080fd5b820183602082011115620002bf57600080fd5b803590602001918460208302840111600160201b83111715620002e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200033157600080fd5b8201836020820111156200034457600080fd5b803590602001918460208302840111600160201b831117156200036657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620003b657600080fd5b820183602082011115620003c957600080fd5b803590602001918460208302840111600160201b83111715620003eb57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200188c945050505050565b3480156200043757600080fd5b50620001ac60048036036101008110156200045157600080fd5b6001600160a01b03823581169260208101359260408201358316926060830135169160808101359181019060c0810160a0820135600160201b8111156200049757600080fd5b820183602082011115620004aa57600080fd5b803590602001918460208302840111600160201b83111715620004cc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200051c57600080fd5b8201836020820111156200052f57600080fd5b803590602001918460208302840111600160201b831117156200055157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620005a157600080fd5b820183602082011115620005b457600080fd5b803590602001918460208302840111600160201b83111715620005d657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062001c21945050505050565b3480156200062257600080fd5b5062000643600480360360208110156200063b57600080fd5b503562001e86565b604080516001600160a01b039092168252519081900360200190f35b3480156200066c57600080fd5b50620001ac60048036036101008110156200068657600080fd5b810190602081018135600160201b811115620006a157600080fd5b820183602082011115620006b457600080fd5b803590602001918460018302840111600160201b83111715620006d657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156200072957600080fd5b8201836020820111156200073c57600080fd5b803590602001918460018302840111600160201b831117156200075e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff85351695602086013595604081013595509193509150608081019060600135600160201b811115620007c657600080fd5b820183602082011115620007d957600080fd5b803590602001918460208302840111600160201b83111715620007fb57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200084b57600080fd5b8201836020820111156200085e57600080fd5b803590602001918460208302840111600160201b831117156200088057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620008d057600080fd5b820183602082011115620008e357600080fd5b803590602001918460208302840111600160201b831117156200090557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062001eb1945050505050565b3480156200095157600080fd5b506200064362002213565b3480156200096957600080fd5b50620001e5600480360360208110156200098257600080fd5b50356001600160a01b031662002222565b348015620009a057600080fd5b50620009ab62002237565b60408051918252519081900360200190f35b348015620009ca57600080fd5b50620001e560048036036020811015620009e357600080fd5b50356001600160a01b03166200223d565b34801562000a0157600080fd5b50620001ac600480360361010081101562000a1b57600080fd5b8135916020810135916001600160a01b0360408301358116926060810135909116916080820135919081019060c0810160a0820135600160201b81111562000a6257600080fd5b82018360208201111562000a7557600080fd5b803590602001918460208302840111600160201b8311171562000a9757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000ae757600080fd5b82018360208201111562000afa57600080fd5b803590602001918460208302840111600160201b8311171562000b1c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000b6c57600080fd5b82018360208201111562000b7f57600080fd5b803590602001918460208302840111600160201b8311171562000ba157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062002252945050505050565b34801562000bed57600080fd5b50620006436004803603602081101562000c0657600080fd5b50356200248a565b34801562000c1b57600080fd5b50620001e5600480360360a081101562000c3457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111562000c6457600080fd5b82018360208201111562000c7757600080fd5b803590602001918460208302840111600160201b8311171562000c9957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000ce957600080fd5b82018360208201111562000cfc57600080fd5b803590602001918460208302840111600160201b8311171562000d1e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000d6e57600080fd5b82018360208201111562000d8157600080fd5b803590602001918460208302840111600160201b8311171562000da357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550620024a5945050505050565b34801562000def57600080fd5b50620001ac600480360360a081101562000e0857600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111562000e3857600080fd5b82018360208201111562000e4b57600080fd5b803590602001918460208302840111600160201b8311171562000e6d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000ebd57600080fd5b82018360208201111562000ed057600080fd5b803590602001918460208302840111600160201b8311171562000ef257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000f4257600080fd5b82018360208201111562000f5557600080fd5b803590602001918460208302840111600160201b8311171562000f7757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062002614945050505050565b34801562000fc357600080fd5b50620009ab620027a6565b34801562000fdb57600080fd5b50620001e56004803603602081101562000ff457600080fd5b5035620027ac565b3480156200100957600080fd5b5062000643620027c1565b3480156200102157600080fd5b50620001e5600480360360a08110156200103a57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200106a57600080fd5b8201836020820111156200107d57600080fd5b803590602001918460208302840111600160201b831117156200109f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620010ef57600080fd5b8201836020820111156200110257600080fd5b803590602001918460208302840111600160201b831117156200112457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200117457600080fd5b8201836020820111156200118757600080fd5b803590602001918460208302840111600160201b83111715620011a957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550620027d0945050505050565b348015620011f557600080fd5b50620009ab600480360360208110156200120e57600080fd5b50356001600160a01b03166200293f565b3480156200122c57600080fd5b50620001ac60048036036101008110156200124657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156200127157600080fd5b8201836020820111156200128457600080fd5b803590602001918460018302840111600160201b83111715620012a657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115620012f957600080fd5b8201836020820111156200130c57600080fd5b803590602001918460018302840111600160201b831117156200132e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff85351695602086013595919450925060608101915060400135600160201b8111156200139057600080fd5b820183602082011115620013a357600080fd5b803590602001918460208302840111600160201b83111715620013c557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200141557600080fd5b8201836020820111156200142857600080fd5b803590602001918460208302840111600160201b831117156200144a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200149a57600080fd5b820183602082011115620014ad57600080fd5b803590602001918460208302840111600160201b83111715620014cf57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062002951945050505050565b620001ac600480360360208110156200152657600080fd5b503562002b63565b60005460ff161515600114620015765760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b600054610100900460ff1615620015bf5760405162461bcd60e51b8152600401808060200182810382526042815260200180620040836042913960600191505060405180910390fd5b60408051636eb1769f60e11b81523360048201523060248201529051829184916001600160a01b0384169163dd62ed3e916044808301926020929190829003018186803b1580156200161057600080fd5b505afa15801562001625573d6000803e3d6000fd5b505050506040513d60208110156200163c57600080fd5b505110156200167d5760405162461bcd60e51b815260040180806020018281038252602d81526020018062004056602d913960400191505060405180910390fd5b6001600160a01b03821660009081526007602052604090205480151580620016b257506009546001600160a01b038481169116145b80620016cb5750600a546001600160a01b038481169116145b1562001743576040805163079cc67960e41b815233600482015260248101869052905184916001600160a01b038316916379cc67909160448082019260009290919082900301818387803b1580156200172357600080fd5b505af115801562001738573d6000803e3d6000fd5b505050505062001821565b6001600160a01b03831660009081526005602052604090205460ff166200179c5760405162461bcd60e51b8152600401808060200182810382526033815260200180620040c56033913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526044810186905290516001600160a01b038416916323b872dd9160648083019260209291908290030181600087803b158015620017f257600080fd5b505af115801562001807573d6000803e3d6000fd5b505050506040513d60208110156200181e57600080fd5b50505b60408051868152602081018690526001600160a01b038516818301526060810183905290517f85c0fa492ded927d3acca961da52b0dda1debb06d8c27fe189315f06bb6e26c89181900360800190a15050505050565b60046020526000908152604090205460ff1681565b60005460ff161515600114620018d45760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60005460ff610100909104161515600114620019225760405162461bcd60e51b815260040180806020018281038252603e8152602001806200412b603e913960400191505060405180910390fd5b306001600160a01b038916146200193857600080fd5b620019b28887898888600b5460405160200180876001600160a01b031660601b8152601401866001600160a01b031660601b81526014018581526020018484602002808284378083019250505082815260200196505050505050506040516020818303038152906040528051906020012084848462002c96565b620019f3576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b60005b60085481101562001a8e5760006008828154811062001a1157fe5b60009182526020822001546040805163f2fde38b60e01b81526001600160a01b038c811660048301529151919092169350839263f2fde38b926024808201939182900301818387803b15801562001a6757600080fd5b505af115801562001a7c573d6000803e3d6000fd5b505060019093019250620019f6915050565b5060005b8481101562001bd057600086868381811062001aaa57fe5b905060200201356001600160a01b03169050806001600160a01b031663a9059cbb89836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801562001b1a57600080fd5b505afa15801562001b2f573d6000803e3d6000fd5b505050506040513d602081101562001b4657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801562001b9857600080fd5b505af115801562001bad573d6000803e3d6000fd5b505050506040513d602081101562001bc457600080fd5b50505060010162001a92565b506000805460ff19169055604080516001600160a01b038816815290517fa2e7361c23d7820040603b83c0cd3f494d377bac69736377d75bb56c651a50989181900360200190a15050505050505050565b60005460ff16151560011462001c695760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60008481526003602052604090205460ff161562001c8657600080fd5b62001d088888888888600b5460405160200180876001600160a01b031660601b8152601401868152602001856001600160a01b031660601b8152601401846001600160a01b031660601b815260140183815260200182815260200196505050505050506040516020818303038152906040528051906020012084848462002c96565b62001d49576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b6001600160a01b03881662001dac57600084815260036020526040808220805460ff19166001179055516001600160a01b0388169189156108fc02918a91818181858888f1935050505015801562001da5573d6000803e3d6000fd5b5062001e49565b6000848152600360209081526040808320805460ff19166001179055805163a9059cbb60e01b81526001600160a01b038a81166004830152602482018c905291518c949285169363a9059cbb936044808501949293928390030190829087803b15801562001e1957600080fd5b505af115801562001e2e573d6000803e3d6000fd5b505050506040513d602081101562001e4557600080fd5b5050505b6040805185815290517f0ce781a18c10c8289803c7c4cfd532d797113c4b41c9701ffad7d0a632ac555b9181900360200190a15050505050505050565b6008818154811062001e9757600080fd5b6000918252602090912001546001600160a01b0316905081565b60005460ff16151560011462001ef95760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60008481526003602052604090205460ff161562001f1657600080fd5b620020078888888888600b546040516020018087805190602001908083835b6020831062001f565780518252601f19909201916020918201910162001f35565b51815160209384036101000a600019018019909216911617905289519190930192890191508083835b6020831062001fa05780518252601f19909201916020918201910162001f7f565b6001836020036101000a0380198251168184511680821785525050505050509050018560ff1660f81b815260010184815260200183815260200182815260200196505050505050506040516020818303038152906040528051906020012084848462002c96565b62002048576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b60008888883060008a6040516200205f9062003024565b8080602001806020018760ff168152602001866001600160a01b03168152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015620020c3578181015183820152602001620020a9565b50505050905090810190601f168015620020f15780820380516001836020036101000a031916815260200191505b5083810382528851815288516020918201918a019080838360005b83811015620021265781810151838201526020016200210c565b50505050905090810190601f168015620021545780820380516001836020036101000a031916815260200191505b5098505050505050505050604051809103906000f0801580156200217c573d6000803e3d6000fd5b50600087815260066020908152604080832080546001600160a01b039095166001600160a01b03199586168117909155808452600783528184209a909a556008805460018181019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018054909516909a179093559681526003909652909420805460ff191690951790945550505050505050565b6009546001600160a01b031681565b60016020526000908152604090205460ff1681565b600b5481565b60056020526000908152604090205460ff1681565b60005460ff1615156001146200229a5760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b6000888152600660205260409020546001600160a01b0316620022ef5760405162461bcd60e51b8152600401808060200182810382526021815260200180620040356021913960400191505060405180910390fd5b60008481526003602052604090205460ff16156200230c57600080fd5b600b546040805160208082018c90528183018b90526bffffffffffffffffffffffff1960608b811b8216818501528a901b1660748301526088820188905260a8808301949094528251808303909401845260c89091019091528151910120620023789084848462002c96565b620023b9576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b600088815260066020526040808220548151633c37699760e21b81526001600160a01b038a81166004830152602482018c905292519290911692839263f0dda65c92604480820193929182900301818387803b1580156200241957600080fd5b505af11580156200242e573d6000803e3d6000fd5b505050600086815260036020908152604091829020805460ff19166001179055815188815291517f0ce781a18c10c8289803c7c4cfd532d797113c4b41c9701ffad7d0a632ac555b9350918290030190a1505050505050505050565b6006602052600090815260409020546001600160a01b031681565b6000805460ff161515600114620024ee5760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60008581526003602052604090205460ff16156200250b57600080fd5b6200255d8686600b5460405160200180846001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012085858562002c96565b6200259e576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b620025a98662002eac565b600085815260036020908152604091829020805460ff1916600190811790915582516001600160a01b038a1681529182015281517fa9fac23eb012e72fbd1f453498e7069c380385436763ee2c1c057b170d88d9f9929181900390910190a150600195945050505050565b60005460ff1615156001146200265c5760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60005460ff610100909104161515600114620026aa5760405162461bcd60e51b815260040180806020018281038252603e8152602001806200412b603e913960400191505060405180910390fd5b600054610100900460ff1615620026c057600080fd5b306001600160a01b03861614620026d657600080fd5b620027288585600b5460405160200180846001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012084848462002c96565b62002769576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b6000805461ff0019166101001781556040517f5389de9593f75e6515eefa796bd2d3324759f441f2c9b2dcda0efb25190378ff9190a15050505050565b60025481565b60036020526000908152604090205460ff1681565b600a546001600160a01b031681565b6000805460ff161515600114620028195760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60008581526003602052604090205460ff16156200283657600080fd5b620028888686600b5460405160200180846001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012085858562002c96565b620028c9576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b620028d48662002f03565b506000858152600360209081526040808320805460ff1916600117905580516001600160a01b038a1681529182019290925281517fa9fac23eb012e72fbd1f453498e7069c380385436763ee2c1c057b170d88d9f9929181900390910190a150600195945050505050565b60076020526000908152604090205481565b60005460ff161515600114620029995760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b60008481526003602052604090205460ff1615620029b657600080fd5b6001600160a01b03881660009081526005602052604090205460ff1615620029dd57600080fd5b62002ada8888888888600b5460405160200180876001600160a01b031660601b815260140186805190602001908083835b6020831062002a2f5780518252601f19909201916020918201910162002a0e565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b6020831062002a795780518252601f19909201916020918201910162002a58565b6001836020036101000a0380198251168184511680821785525050505050509050018460ff1660f81b815260010183815260200182815260200196505050505050506040516020818303038152906040528051906020012084848462002c96565b62002b1b576040805162461bcd60e51b815260206004820152601b602482015260008051602062004169833981519152604482015290519081900360640190fd5b5050506001600160a01b039094166000908152600560209081526040808320805460ff1990811660019081179092559784526003909252909120805490951617909355505050565b60005460ff16151560011462002bab5760405162461bcd60e51b8152600401808060200182810382526033815260200180620040f86033913960400191505060405180910390fd5b600054610100900460ff161562002bf45760405162461bcd60e51b8152600401808060200182810382526042815260200180620040836042913960600191505060405180910390fd5b6000341162002c4a576040805162461bcd60e51b815260206004820152601f60248201527f4554482056414c55452053484f554c44204245204d4f5245205448414e203000604482015290519081900360640190fd5b6040805182815234602082015260008183018190526060820181905291517f85c0fa492ded927d3acca961da52b0dda1debb06d8c27fe189315f06bb6e26c89181900360800190a15050565b60006001600254101562002ca957600080fd5b825184511462002cb857600080fd5b815183511462002cc757600080fd5b600060036001600254038162002cd957fe5b04600254039050808351101562002cef57600080fd5b600080845167ffffffffffffffff8111801562002d0b57600080fd5b5060405190808252806020026020018201604052801562002d36578160200160208202803683370190505b50905060005b855181101562002e4457600062002d928a8a848151811062002d5a57fe5b60200260200101518a858151811062002d6f57fe5b60200260200101518a868151811062002d8457fe5b602002602001015162002f5d565b6001600160a01b03811660009081526001602081905260409091205491925060ff909116151514158062002de357506001600160a01b03811660009081526004602052604090205460ff1615156001145b1562002df0575062002e3b565b8083858151811062002dfe57fe5b6001600160a01b0392831660209182029290920181019190915291166000908152600490915260409020805460ff19166001908117909155909201915b60010162002d3c565b5060005b8281101562002e9f5760006004600084848151811062002e6457fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162002e48565b5050101595945050505050565b6001600160a01b03811660009081526001602081905260409091205460ff1615151462002ed857600080fd5b6001600160a01b03166000908152600160205260409020805460ff1916905560028054600019019055565b6001600160a01b03811660009081526001602052604081205460ff161562002f2a57600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b6000808560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156200300e573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b61100280620030338339019056fe60806040523480156200001157600080fd5b506040516200100238038062001002833981810160405260c08110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608090940151885193965090945091879187918791620001d39160039186019062000388565b508151620001e990600490602085019062000388565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360068190556200026183836200026d565b50505050505062000434565b6001600160a01b0382166200028157600080fd5b6200029d816002546200032660201b620007171790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002d09183906200071762000326821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008282018381101562000381576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003c057600085556200040b565b82601f10620003db57805160ff19168380011785556200040b565b828001600101855582156200040b579182015b828111156200040b578251825591602001919060010190620003ee565b50620004199291506200041d565b5090565b5b808211156200041957600081556001016200041e565b610bbe80620004446000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806379cc6790116100ad578063a9059cbb11610071578063a9059cbb14610356578063dd62ed3e14610382578063f0dda65c146103b0578063f2fde38b146103dc578063fcec35a91461040257610121565b806379cc6790146102ca5780638da5cb5b146102f65780638f32d59b1461031a57806395d89b4114610322578063a457c2d71461032a57610121565b8063313ce567116100f4578063313ce56714610233578063395093511461025157806342966c681461027d57806370a082311461029c578063715018a6146102c257610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b61023b61050d565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026757600080fd5b506001600160a01b038135169060200135610516565b61029a6004803603602081101561029357600080fd5b503561054c565b005b6101eb600480360360208110156102b257600080fd5b50356001600160a01b0316610559565b61029a610574565b61029a600480360360408110156102e057600080fd5b506001600160a01b0381351690602001356105d5565b6102fe6105e3565b604080516001600160a01b039092168252519081900360200190f35b6101cf6105f7565b61012e61060d565b6101cf6004803603604081101561034057600080fd5b506001600160a01b03813516906020013561066e565b6101cf6004803603604081101561036c57600080fd5b506001600160a01b0381351690602001356106a4565b6101eb6004803603604081101561039857600080fd5b506001600160a01b03813581169160200135166106b1565b61029a600480360360408110156103c657600080fd5b506001600160a01b0381351690602001356106dc565b61029a600480360360208110156103f257600080fd5b50356001600160a01b03166106f7565b6101eb610711565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad338484610778565b50600192915050565b60025490565b60006104c9848484610800565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546105039186916104fe90866108bf565b610778565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad9185906104fe9086610717565b6105563382610901565b50565b6001600160a01b031660009081526020819052604090205490565b61057c6105f7565b61058557600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105df828261099c565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad9185906104fe90866108bf565b60006104ad338484610800565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106e46105f7565b6106ed57600080fd5b6105df82826109db565b6106ff6105f7565b61070857600080fd5b61055681610a77565b60065481565b600082820183811015610771576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b03821661078b57600080fd5b6001600160a01b03831661079e57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03821661081357600080fd5b6001600160a01b03831660009081526020819052604090205461083690826108bf565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108659082610717565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600061077183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610af1565b6001600160a01b03821661091457600080fd5b60025461092190826108bf565b6002556001600160a01b03821660009081526020819052604090205461094790826108bf565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6109a68282610901565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105df9184916104fe90856108bf565b6001600160a01b0382166109ee57600080fd5b6002546109fb9082610717565b6002556001600160a01b038216600090815260208190526040902054610a219082610717565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a8a57600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008184841115610b805760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b45578181015183820152602001610b2d565b50505050905090810190601f168015610b725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea26469706673582212203b272cc4cbf665733fe3ad2227b37d35a873260c2e67677110f14aaac8d7db1a64736f6c6343000706003353696465636861696e206173736574206973206e6f7420726567697374657265644e4f5420454e4f5547482044454c45474154454420544f4b454e53204f4e2053454e4445522042414c414e4345436f6e74726163742073686f756c64206e6f7420626520707265706172656420666f72206d6967726174696f6e20746f2075736520746869732066756e6374696f6e54686520546f6b656e206973206e6f7420616363657074656420666f72207472616e7366657220746f2073696465636861696e436f6e74726163742073686f756c6420626520696e697469616c697a656420746f2075736520746869732066756e6374696f6e436f6e74726163742073686f756c6420626520707265706172656420666f72206d6967726174696f6e20746f2075736520746869732066756e6374696f6e50656572207369676e6174757265732061726520696e76616c69640000000000a2646970667358221220813301480ecf24e0745ca72397f321f662f4a2bd91c6c6b9adfc0894b2c56f7964736f6c63430007060033";

    public static final String FUNC__ADDRESSVAL = "_addressVAL";

    public static final String FUNC__ADDRESSXOR = "_addressXOR";

    public static final String FUNC__NETWORKID = "_networkId";

    public static final String FUNC__SIDECHAINTOKENADDRESSARRAY = "_sidechainTokenAddressArray";

    public static final String FUNC__SIDECHAINTOKENS = "_sidechainTokens";

    public static final String FUNC__SIDECHAINTOKENSBYADDRESS = "_sidechainTokensByAddress";

    public static final String FUNC__UNIQUEADDRESSES = "_uniqueAddresses";

    public static final String FUNC_ACCEPTEDETHTOKENS = "acceptedEthTokens";

    public static final String FUNC_ADDETHNATIVETOKEN = "addEthNativeToken";

    public static final String FUNC_ADDNEWSIDECHAINTOKEN = "addNewSidechainToken";

    public static final String FUNC_ADDPEERBYPEER = "addPeerByPeer";

    public static final String FUNC_ISPEER = "isPeer";

    public static final String FUNC_PEERSCOUNT = "peersCount";

    public static final String FUNC_PREPAREFORMIGRATION = "prepareForMigration";

    public static final String FUNC_RECEIVEBYETHEREUMASSETADDRESS = "receiveByEthereumAssetAddress";

    public static final String FUNC_RECEIVEBYSIDECHAINASSETID = "receiveBySidechainAssetId";

    public static final String FUNC_REMOVEPEERBYPEER = "removePeerByPeer";

    public static final String FUNC_SENDERC20TOSIDECHAIN = "sendERC20ToSidechain";

    public static final String FUNC_SENDETHTOSIDECHAIN = "sendEthToSidechain";

    public static final String FUNC_SHUTDOWNANDMIGRATE = "shutDownAndMigrate";

    public static final String FUNC_USED = "used";

    public static final Event CHANGEPEERS_EVENT = new Event("ChangePeers", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event MIGRATED_EVENT = new Event("Migrated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PREPAREDFORMIGRATION_EVENT = new Event("PreparedForMigration", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Bridge(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Bridge(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Bridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Bridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ChangePeersEventResponse> getChangePeersEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEPEERS_EVENT, transactionReceipt);
        ArrayList<ChangePeersEventResponse> responses = new ArrayList<ChangePeersEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangePeersEventResponse typedResponse = new ChangePeersEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.peerId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.removal = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangePeersEventResponse> changePeersEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChangePeersEventResponse>() {
            @Override
            public ChangePeersEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGEPEERS_EVENT, log);
                ChangePeersEventResponse typedResponse = new ChangePeersEventResponse();
                typedResponse.log = log;
                typedResponse.peerId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.removal = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangePeersEventResponse> changePeersEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEPEERS_EVENT));
        return changePeersEventFlowable(filter);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.destination = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sidechainAsset = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.destination = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sidechainAsset = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public List<MigratedEventResponse> getMigratedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MIGRATED_EVENT, transactionReceipt);
        ArrayList<MigratedEventResponse> responses = new ArrayList<MigratedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MigratedEventResponse typedResponse = new MigratedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MigratedEventResponse> migratedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MigratedEventResponse>() {
            @Override
            public MigratedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MIGRATED_EVENT, log);
                MigratedEventResponse typedResponse = new MigratedEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MigratedEventResponse> migratedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MIGRATED_EVENT));
        return migratedEventFlowable(filter);
    }

    public List<PreparedForMigrationEventResponse> getPreparedForMigrationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PREPAREDFORMIGRATION_EVENT, transactionReceipt);
        ArrayList<PreparedForMigrationEventResponse> responses = new ArrayList<PreparedForMigrationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PreparedForMigrationEventResponse typedResponse = new PreparedForMigrationEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PreparedForMigrationEventResponse> preparedForMigrationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PreparedForMigrationEventResponse>() {
            @Override
            public PreparedForMigrationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PREPAREDFORMIGRATION_EVENT, log);
                PreparedForMigrationEventResponse typedResponse = new PreparedForMigrationEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<PreparedForMigrationEventResponse> preparedForMigrationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PREPAREDFORMIGRATION_EVENT));
        return preparedForMigrationEventFlowable(filter);
    }

    public List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalEventResponse>() {
            @Override
            public WithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWAL_EVENT, log);
                WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public RemoteFunctionCall<String> _addressVAL() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ADDRESSVAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> _addressXOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ADDRESSXOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> _networkId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__NETWORKID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> _sidechainTokenAddressArray(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SIDECHAINTOKENADDRESSARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> _sidechainTokens(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SIDECHAINTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> _sidechainTokensByAddress(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SIDECHAINTOKENSBYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> _uniqueAddresses(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__UNIQUEADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> acceptedEthTokens(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCEPTEDETHTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addEthNativeToken(String newToken, String ticker, String name, BigInteger decimals, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDETHNATIVETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newToken), 
                new org.web3j.abi.datatypes.Utf8String(ticker), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addNewSidechainToken(String name, String symbol, BigInteger decimals, byte[] sidechainAssetId, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDNEWSIDECHAINTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals), 
                new org.web3j.abi.datatypes.generated.Bytes32(sidechainAssetId), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPeerByPeer(String newPeerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newPeerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isPeer(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> peersCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PEERSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareForMigration(String thisContractAddress, byte[] salt, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PREPAREFORMIGRATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, thisContractAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(salt), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveByEthereumAssetAddress(String tokenAddress, BigInteger amount, String to, String from, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEBYETHEREUMASSETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveBySidechainAssetId(byte[] sidechainAssetId, BigInteger amount, String to, String from, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEBYSIDECHAINASSETID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sidechainAssetId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removePeerByPeer(String peerAddress, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEPEERBYPEER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, peerAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(txHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendERC20ToSidechain(byte[] to, BigInteger amount, String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDERC20TOSIDECHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendEthToSidechain(byte[] to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDETHTOSIDECHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> shutDownAndMigrate(String thisContractAddress, byte[] salt, String newContractAddress, List<String> erc20nativeTokens, List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SHUTDOWNANDMIGRATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, thisContractAddress), 
                new org.web3j.abi.datatypes.generated.Bytes32(salt), 
                new org.web3j.abi.datatypes.Address(160, newContractAddress), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(erc20nativeTokens, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> used(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Bridge load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Bridge(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Bridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Bridge(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Bridge load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Bridge(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Bridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Bridge(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Bridge> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, List<String> initialPeers, String addressVAL, String addressXOR, byte[] networkId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(160, addressVAL), 
                new org.web3j.abi.datatypes.Address(160, addressXOR), 
                new org.web3j.abi.datatypes.generated.Bytes32(networkId)));
        return deployRemoteCall(Bridge.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Bridge> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, List<String> initialPeers, String addressVAL, String addressXOR, byte[] networkId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(160, addressVAL), 
                new org.web3j.abi.datatypes.Address(160, addressXOR), 
                new org.web3j.abi.datatypes.generated.Bytes32(networkId)));
        return deployRemoteCall(Bridge.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Bridge> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, List<String> initialPeers, String addressVAL, String addressXOR, byte[] networkId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(160, addressVAL), 
                new org.web3j.abi.datatypes.Address(160, addressXOR), 
                new org.web3j.abi.datatypes.generated.Bytes32(networkId)));
        return deployRemoteCall(Bridge.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Bridge> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, List<String> initialPeers, String addressVAL, String addressXOR, byte[] networkId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(initialPeers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(160, addressVAL), 
                new org.web3j.abi.datatypes.Address(160, addressXOR), 
                new org.web3j.abi.datatypes.generated.Bytes32(networkId)));
        return deployRemoteCall(Bridge.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ChangePeersEventResponse extends BaseEventResponse {
        public String peerId;

        public Boolean removal;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public byte[] destination;

        public BigInteger amount;

        public String token;

        public byte[] sidechainAsset;
    }

    public static class MigratedEventResponse extends BaseEventResponse {
        public String to;
    }

    public static class PreparedForMigrationEventResponse extends BaseEventResponse {
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public byte[] txHash;
    }
}
