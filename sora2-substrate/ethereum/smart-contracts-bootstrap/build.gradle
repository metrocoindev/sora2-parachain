buildscript {
    ext.kotlin_version = '1.3.61'

    repositories {
        mavenCentral()
        jcenter()
        // gradle plugins repository
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id "org.sonarqube" version "2.8"
}

subprojects {
    sonarqube {
        properties {
            property "sonar.github.repository", "soramitsu/sora-network-bootstrap"
            property "sonar.projectKey", "d3:sora-network-bootstrap"
            property "sonar.java.binaries", "${project.projectDir}/build/classes"
            property "sonar.java.libraries", "${project.projectDir}/build/libs"
            property "sonar.java.test.binaries", "${project.projectDir}/build/test-results/test/binary"
            property "sonar.exclusions", "**/integration-test/**"
        }
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: "org.sonarqube"
    repositories {
        mavenCentral()
        // for Ktor
        jcenter()
        maven { url = 'https://dl.bintray.com/kotlin/ktor' }
        maven { url 'https://jitpack.io' }
    }
}

allprojects {
    dependencies {
        // Iroha Pure Java library
        implementation 'com.github.hyperledger.iroha-java:client:6.1.0'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    }
}

allprojects {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

task buildEthereumContracts(type: Exec) {
    description = 'Build Ethereum contracts'

    String contract_path = projectDir.toString().concat("/../contracts").replaceAll('\\\\', '/');
    String bin_path = contract_path.concat("/bin")
    file(bin_path).mkdirs()

    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
    }

    System.out.println("projectDir " + projectDir);

   commandLine 'sh', '-c', 'solc <path>/*.sol --bin --abi --optimize -o <path>/bin --overwrite'.replace("<path>", contract_path)
}

task buildEthereumContractsBindings(type: Exec) {

    String contract_path = projectDir.toString().concat("/../contracts").replaceAll('\\\\', '/');
    //for Windows
    //String contract_path = '/mnt/c/work/sora/sora2-substrate/ethereum/smart-contracts-bootstrap/../contracts'
    String bin_path = contract_path.concat("/bin")
    System.out.println(bin_path)
    String wildcard = "<path>/*.bin".replace("<path>", bin_path)
    String cmd = 'for f in ' + wildcard + '; ' +
            'do ' +
            'name=$(echo "$f" | rev | cut -f 2,3,4 -d \'.\' | rev); ' +
            'web3j generate solidity -b ${name}.bin --abiFile=${name}.abi -o <bin_path> -p jp.co.soramitsu.soranet.eth.contract \n'.replace("<bin_path>", bin_path) +
            'done \n' +
            'cp -R ../contracts/bin/jp sora-network-bootstrap/src/main/java/ \n' +
            'cp ../contracts/bin/*.abi deploy/abi \n' +
            'rm -R ../contracts/bin'
    System.out.println(cmd)
    commandLine 'bash', '-c', cmd
}

buildEthereumContractsBindings.dependsOn ':buildEthereumContracts'

//Forms a list of ETH passwords from command line arguments
def getEthPasswordsArgs() {
    List<String> args = new ArrayList<>()
    if (project.hasProperty("credentialsPassword")) {
        args.add(project.property("credentialsPassword").toString())
    }
    if (project.hasProperty("nodeLogin")) {
        args.add(project.property("nodeLogin").toString())
    }
    if (project.hasProperty("nodePassword")) {
        args.add(project.property("nodePassword").toString())
    }
    return args
}
